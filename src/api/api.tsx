// Importerar gr칛nssnittet "cartItem" fr친n en separat fil som inneh친ller typer/interfacen
// Detta anv칛nds f칬r att ge korrekt typning p친 varukorgen i placeOrder-funktionen
import { cartItem } from "../interfaces/interface";

// Definierar bas-URL:en f칬r API:et som anv칛nds i alla API-anrop
const API_URL = "https://fdnzawlcf6.execute-api.eu-north-1.amazonaws.com";

/**
 * Funktion f칬r att h칛mta en API-nyckel fr친n servern.
 * Denna nyckel lagras sedan i localStorage f칬r att anv칛ndas i framtida API-anrop.
 *
 * @returns {Promise<string>} - En Promise som returnerar API-nyckeln som en str칛ng.
 */
export const fetchApiKeyFromServer = async (): Promise<string> => {
  // Skickar en POST-f칬rfr친gan till API:et f칬r att skapa en ny API-nyckel
  const res = await fetch(`${API_URL}/keys`, {
    method: "POST", // Anv칛nder POST-metoden f칬r att skapa nyckeln
    headers: { "Content-Type": "application/json" }, // Anger att vi skickar JSON-data
    body: JSON.stringify({ tenant: "kalle" }), // Skickar en JSON-body med en "tenant"-parameter
  });

  // Om servern svarar med en felstatus kastas ett fel
  if (!res.ok) throw new Error(`Failed to fetch API key: ${res.status}`);

  // Omvandla svaret till JSON
  const data = await res.json();

  // Sparar API-nyckeln i webbl칛sarens localStorage f칬r framtida anv칛ndning
  localStorage.setItem("apiKey", data.key);

  // Returnerar API-nyckeln
  return data.key;
};

/**
 * Funktion f칬r att h칛mta menyn fr친n servern.
 *
 * @param {string} apiKey - API-nyckeln f칬r autentisering.
 * @returns {Promise<any>} - En Promise som returnerar menyn i JSON-format.
 */
export const fetchMenuFromServer = async (apiKey: string) => {
  // Skickar en GET-f칬rfr친gan till API:et med API-nyckeln som header
  const res = await fetch(`${API_URL}/menu`, {
    headers: { "x-zocom": apiKey }, // API-nyckeln anv칛nds f칬r autentisering
  });

  // Hantera fel om f칬rfr친gan misslyckas
  if (!res.ok) throw new Error(`Failed to fetch menu: ${res.status}`);

  // Omvandla svaret till JSON-format
  const data = await res.json();

  // Logga datan i konsolen f칬r debugging
  console.log(data);

  return data;
};

/**
 * Funktion f칬r att l칛gga en best칛llning via API:et.
 *
 * @param {string} apiKey - API-nyckeln f칬r autentisering.
 * @param {string} tenant - Namnet p친 den tenant som best칛llningen g칬rs under.
 * @param {cartItem[]} cartItems - En array av varor som anv칛ndaren vill best칛lla.
 * @returns {Promise<any>} - En Promise som returnerar best칛llningens responsdata.
 */
export const placeOrder = async (
  apiKey: string,
  tenant: string,
  cartItems: cartItem[]
) => {
  // Skickar en POST-f칬rfr친gan till API:et f칬r att skapa en best칛llning
  const res = await fetch(`${API_URL}/${tenant}/orders`, {
    method: "POST", // Anv칛nder POST-metoden f칬r att skicka en ny best칛llning
    headers: {
      "Content-Type": "application/json",
      "x-zocom": apiKey, // Skickar API-nyckeln i headers f칬r autentisering
    },
    body: JSON.stringify({
      items: cartItems.map((item) => item.id), // 游댳 Skickar endast varornas ID:n, inte hela objekten
    }),
  });

  // Om f칬rfr친gan misslyckas kastas ett fel
  if (!res.ok) {
    throw new Error(`Failed to place order: ${res.status}`);
  }

  // Omvandla svaret till JSON-format
  const data = await res.json();
  return data;
};

/**
 * Funktion f칬r att h칛mta kvitto f칬r en genomf칬rd best칛llning.
 *
 * @param {string} apiKey - API-nyckeln f칬r autentisering.
 * @param {string} orderId - ID f칬r den best칛llning man vill h칛mta kvitto f칬r.
 * @returns {Promise<any>} - En Promise som returnerar kvittodata i JSON-format.
 */
export const fetchReceipt = async (apiKey: string, orderId: string) => {
  // Skickar en GET-f칬rfr친gan till API:et f칬r att h칛mta kvittot
  const res = await fetch(`${API_URL}/receipts/${orderId}`, {
    headers: {
      "Content-Type": "application/json",
      "x-zocom": apiKey, // API-nyckeln anv칛nds f칬r autentisering
    },
  });

  // Hantera fel om f칬rfr친gan misslyckas
  if (!res.ok) {
    throw new Error(`Failed to fetch receipt: ${res.status}`);
  }

  // Omvandla svaret till JSON-format
  const data = await res.json();
  return data;
};
